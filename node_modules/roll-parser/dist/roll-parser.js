(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.rollParser = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* eslint global-require: "off" */
module.exports = {
  Roll: require( './src/object/Roll' ),
  WodRoll: require( './src/object/WodRoll' ),
  Result: require( './src/object/Result' ),

  parse: require( './src/complex/parse' ),
  parseClassicRoll: require( './src/complex/parseClassicRoll' ),
  parseSimpleRoll: require( './src/complex/parseSimpleRoll' ),
  parseWodRoll: require( './src/complex/parseWodRoll' ),

  roll: require( './src/roller' ).rollAny,
  rollClassic: require( './src/roller' ).rollClassic,
  rollWod: require( './src/roller' ).rollWod,

  parseAndRoll: require( './src/complex/parseAndRoll' ),
  parseAndRollSimple: require( './src/complex/parseAndRollSimple' ),
  parseAndRollClassic: require( './src/complex/parseAndRollClassic' ),
  parseAndRollWod: require( './src/complex/parseAndRollWod' ),

  random: require( './src/random' ).randomRoll,

  convert: require( './src/converter' ).convertToAnyRoll,
};

},{"./src/complex/parse":2,"./src/complex/parseAndRoll":3,"./src/complex/parseAndRollClassic":4,"./src/complex/parseAndRollSimple":5,"./src/complex/parseAndRollWod":6,"./src/complex/parseClassicRoll":7,"./src/complex/parseSimpleRoll":8,"./src/complex/parseWodRoll":9,"./src/converter":10,"./src/object/Result":14,"./src/object/Roll":15,"./src/object/WodRoll":17,"./src/random":19,"./src/roller":20}],2:[function(require,module,exports){
const { parseAny } = require( '../parser' );
const { mapToRoll, mapToWodRoll } = require( '../mapper' );
const Type = require( '../object/Type' );

/**
 * Parses simplified, classic or WoD roll notation.
 *
 * @func
 * @since v2.0.0
 * @param {String} roll
 * @return {Roll|WodRoll|null}
 * @see parseSimpleRoll
 * @see parseClassicRoll
 * @see parseWodRoll
 * @example
 * parse('2 10 -1');   //=> { dice: 10, count: 2, modifier: -1 }
 * parse('2d10+1');    //=> { dice: 10, count: 2, modifier: 1 }
 * parse('4d10!>8f1'); //=> { dice: 10, count: 4, again: true, success: 8, fail: 1 }
 * parse('xyz');       //=> null
 */
function parse( roll ) {
  const result = parseAny( roll );
  const type = result ? result.type : '';

  switch ( type ) {
    case Type.simple:
      return mapToRoll( result );
    case Type.classic:
      return mapToRoll( result );
    case Type.wod:
      return mapToWodRoll( result );
    default:
      return null;
  }
}

module.exports = parse;

},{"../mapper":12,"../object/Type":16,"../parser":18}],3:[function(require,module,exports){
const { rollAny } = require( '../roller' );
const parse = require( './parse' );

/**
 * Parses simplified, classic or WoD roll notation and then rolls the dice.
 *
 * @func
 * @since v2.0.0
 * @param {String} roll
 * @return {Result|null} Returns `Result` for defined parameters, otherwise returns `null`.
 * @see parseAndRollSimple
 * @see parseAndRollClassic
 * @see parseAndRollWod
 * @example
 * parseAndRoll('2 10 -1');   //=> { notation: '2d10-1', value: 14, rolls: [ 7, 8 ] }
 * parseAndRoll('2d10+1');    //=> { notation: '2d10+1', value: 9, rolls: [ 2, 6 ] }
 * parseAndRoll('4d10!>8f1'); //=> { notation: '4d10!>8f1', value: 2, rolls: [ 3, 10, 7, 9, 5 ] }
 */
const parseAndRoll = roll => rollAny( parse( roll ));

module.exports = parseAndRoll;

},{"../roller":20,"./parse":2}],4:[function(require,module,exports){
const { rollClassic } = require( '../roller' );
const parseClassicRoll = require( './parseClassicRoll' );

/**
 * Parses classic notation and then rolls the dice.
 *
 * @func
 * @since v2.0.0
 * @param {String} roll
 * @return {Result}
 * @see parseAndRoll
 * @see parseAndRollSimple
 * @see parseAndRollWod
 * @example
 * parseAndRollClassic('2d10+1');  //=> { notation: '2d10+1', value: 9, rolls: [ 2, 6 ] }
 * parseAndRollClassic('d6');      //=> { notation: 'd6', value: 3, rolls: [ 3 ] }
 */
const parseAndRollClassic = roll => rollClassic( parseClassicRoll( roll ));

module.exports = parseAndRollClassic;

},{"../roller":20,"./parseClassicRoll":7}],5:[function(require,module,exports){
const { rollClassic } = require( '../roller' );
const parseSimpleRoll = require( './parseSimpleRoll' );

/**
 * Parses simple notation and then rolls the dice.
 *
 * @func
 * @since v2.0.0
 * @param {String} roll
 * @return {Result}
 * @see parseAndRoll
 * @see parseAndRollSimple
 * @see parseAndRollWod
 * @example
 * parseAndRollSimple('2 10 -1'); //=> { notation: '2d10-1', value: 14, rolls: [ 7, 8 ] }
 */
const parseAndRollSimple = roll => rollClassic( parseSimpleRoll( roll ));

module.exports = parseAndRollSimple;

},{"../roller":20,"./parseSimpleRoll":8}],6:[function(require,module,exports){
const { rollWod } = require( '../roller' );
const parseWodRoll = require( './parseWodRoll' );

/**
 * Parses WoD roll notation and then rolls the dice.
 *
 * @func
 * @since v2.0.0
 * @param {String} roll
 * @return {Result}
 * @see parseAndRoll
 * @see parseAndRollSimple
 * @see parseAndRollClassic
 * @example
 * parseAndRollWod('2d10>6');    //=> { notation: '2d10>6', value: 1, rolls: [ 5, 10 ] }
 * parseAndRollWod('4d10!>8f1'); //=> { notation: '4d10!>8f1', value: 2, rolls: [ 3, 10, 7, 9, 5 ] }
 */
const parseAndRollWod = roll => rollWod( parseWodRoll( roll ));

module.exports = parseAndRollWod;

},{"../roller":20,"./parseWodRoll":9}],7:[function(require,module,exports){
const { parseClassic } = require( '../parser' );
const { mapToRoll } = require( '../mapper' );

/**
 * Parses classic DnD roll notation.
 *
 * @func
 * @since v2.0.0
 * @param {String} roll
 * @return {Roll}
 * @see parse
 * @see parseSimpleRoll
 * @see parseWodRoll
 * @example
 * parseClassicRoll('d10');    //=> { dice: 10, count: 1, modifier: 0 }
 * parseClassicRoll('2d10');   //=> { dice: 10, count: 2, modifier: 0 }
 * parseClassicRoll('d10+1');  //=> { dice: 10, count: 1, modifier: 1 }
 * parseClassicRoll('2d10-1'); //=> { dice: 10, count: 2, modifier: -1 }
 */
const parseClassicRoll = roll => mapToRoll( parseClassic( roll ));

module.exports = parseClassicRoll;

},{"../mapper":12,"../parser":18}],8:[function(require,module,exports){
const { parseSimple } = require( '../parser' );
const { mapToRoll } = require( '../mapper' );

/**
 * Parses simple roll notation (space separated values).
 *
 * @func
 * @since v2.0.0
 * @param {String} roll
 * @return {Roll}
 * @see parse
 * @see parseClassicRoll
 * @see parseWodRoll
 * @example
 * parseSimpleRoll('10');      //=> { dice: 10, count: 1, modifier: 0 }
 * parseSimpleRoll('2 10');    //=> { dice: 10, count: 2, modifier: 0 }
 * parseSimpleRoll('2 10 -1'); //=> { dice: 10, count: 2, modifier: -1 }
 */
const parseSimpleRoll = roll => mapToRoll( parseSimple( roll ));

module.exports = parseSimpleRoll;

},{"../mapper":12,"../parser":18}],9:[function(require,module,exports){
const { parseWod } = require( '../parser' );
const { mapToWodRoll } = require( '../mapper' );

/**
 * Parses World of Darkness (WoD) roll notation.
 *
 * @func
 * @since v2.0.0
 * @param {String} roll
 * @return {WodRoll}
 * @see parse
 * @see parseSimpleRoll
 * @see parseClassicRoll
 * @example
 * parseWodRoll('d10>6');     //=> { dice: 10, count: 1, again: false, success: 6, fail: 0 }
 * parseWodRoll('2d10!>6');   //=> { dice: 10, count: 2, again: true, success: 6, fail: 0 }
 * parseWodRoll('4d10!>8f1'); //=> { dice: 10, count: 4, again: true, success: 8, fail: 1 }
 */
const parseWodRoll = roll => mapToWodRoll( parseWod( roll ));

module.exports = parseWodRoll;

},{"../mapper":12,"../parser":18}],10:[function(require,module,exports){
const { isAbsent } = require( './normalizer' );
const Roll = require( './object/Roll' );
const WodRoll = require( './object/WodRoll' );

function convertToRoll( object = {}) {
  const { dice, count, modifier } = object || {};

  return new Roll( dice, count, modifier );
}

function convertToWodRoll( object = {}) {
  const { dice, count, again, success, fail } = object || {};

  return new WodRoll( dice, count, again, success, fail );
}

/**
 * Converts any arguments to `Roll` or `WodRoll` object.
 * If passed argument has `again`, `success` or `fail` property, the function will return `WodRoll`.
 * Otherwise, `Roll` will be returned.
 *
 * @func
 * @alias convert
 * @since v2.1.0
 * @param {Object} object - `Roll`, `WodRoll` or similar object.
 * @return {Roll|WodRoll} Result of converion.
 * @example
 * convert({ dice: 6 }); //=> new Roll( 6 )
 * convert({ modifier: 6 }); //=> new Roll( undefined, undefined, 6 )
 * convert({ dice: 10, count: 5, success: 5 }); //=> new WodRoll( 10, 5, undefined, 5 )
 */
function convertToAnyRoll( object = {}) {
  const { again, success, fail } = object || {};

  if ( isAbsent( again ) && isAbsent( success ) && isAbsent( fail )) {
    return convertToRoll( object );
  } // else
  return convertToWodRoll( object );
}

module.exports = {
  convertToRoll,
  convertToWodRoll,
  convertToAnyRoll,
};

},{"./normalizer":13,"./object/Roll":15,"./object/WodRoll":17}],11:[function(require,module,exports){
// Multiple instances of each notation exists for purposes of readability
// Each grammar is an array of RegExps
module.exports = {
  simple: [
    /^(\d+)(?:\s+(\d+)(?:\s+([+-]?\d+))?)?$/,        // 1 20 4 || 1 20 +4 5 || 1 20 -4 5 20
  ],
  classic: [
    /^(\d*)(?:[dD])(\d+)([+-]\d+)?$/,                // d20 || 1d20 || d20+4 || 1d20-4
  ],
  wod: [
    /^(\d*)(?:[dD])(\d+)(!?)$/,                      // d10 || d10! || 1d10 || 1d10!
    /^(\d*)(?:[dD])(\d+)(!?)(?:>)(\d+)(?:f(\d+))?$/, // d10>6 || 1d10>6 || 1d10!>6 || 1d10!>6f1
  ],
};

},{}],12:[function(require,module,exports){
const { normalizeRegexResult, isAbsent } = require( './normalizer' );
const Roll = require( './object/Roll' );
const WodRoll = require( './object/WodRoll' );

// map :: Object -> [Array | null]
//   Takes a result of RegExp.prototype.exec() and returns an Array of integers, strings, and null
function map( result ) {
  const invalid = !result || result.length < 2;
  return invalid ? null : ( result.slice( 1 ).map( normalizeRegexResult ));
}

const orderArguments = limit => ( values ) => {
  if ( !values || values.length === 0 ) {
    return null;
  }

  // Minimum grammar accepts 2 values. If second is not set, it is mapped to `null`
  const sinlge = values.length === 1 || values.slice( 1 ).every( isAbsent );
  if ( sinlge ) {
    return [ values[ 0 ] ];
  }

  return [ values[ 1 ], values[ 0 ], ...values.slice( 2, limit ) ];
};

const orderRollArguments = orderArguments( 3 );
const orderWodRollArguments = orderArguments( 5 );

// mapToRoll :: Object -> [Object | null]
//   Orders map() values with orderArguments(), takes the result
//   and returns a Roll object or null
const mapToRoll = ( result ) => {
  const values = orderRollArguments( map( result ));
  return values ? new Roll( ...values ) : null;
};

// mapToWodRoll :: Object -> [Object | null]
//   Orders map() values with orderArguments(), takes the result
//   and returns a WodRoll object or null
const mapToWodRoll = ( result ) => {
  const values = orderWodRollArguments( map( result ));
  return values ? new WodRoll( ...values ) : null;
};

module.exports = {
  map,
  orderArguments,
  mapToRoll,
  mapToWodRoll,
};

},{"./normalizer":13,"./object/Roll":15,"./object/WodRoll":17}],13:[function(require,module,exports){
// isPositiveInteger :: Number -> Boolean
const isPositiveInteger = value => Number.isInteger( value ) && value > 0;

// fixInvalid :: Number -> Any -> Number
const fixInvalid = backup => value => ( isPositiveInteger( value ) ? value : backup );

// normalizeInteger :: Any -> Number
const normalizeInteger = value => ( Number.isInteger( value ) ? value : 0 );

// normalizeRollResult :: Any -> Number
const normalizeRollResult = fixInvalid( 1 );

// normalizeTop :: Number -> Number -> Number
const normalizeTop = max => top => Math.min( fixInvalid( Number.MAX_SAFE_INTEGER )( top ), max );
// normalizeTop :: Number -> Number -> Number
const normalizeBottom = max => bottom => Math.min( fixInvalid( 0 )( bottom ), max );

// normalizeWodBorders :: ( Number, Number, Number ) -> [ Number, Number ]
const normalizeWodBorders = ( bottom, top, max ) => {
  const b = normalizeTop( max )( top );
  const a = normalizeBottom( b - 1 )( bottom );
  return [ a, b ];
};

// isDefined :: Any -> Boolean
//   Checks for the existence of the value
const isDefined = value => value !== undefined && value !== null;

// isAbsent :: Any -> Boolean
//   Checks for absence of the values from RegExp execution result.
const isAbsent = value => value === undefined || value === null || value === '';

// toInteger :: a -> Number | a
// a = String | Any
const toInteger = value => parseInt( value, 10 ) || value;


// normalizeRegexResult :: Any -> null | Number | String
const normalizeRegexResult = value => ( isAbsent( value ) ? null : toInteger( value ));

module.exports = {
  isAbsent,
  isDefined,
  fixInvalid,
  normalizeInteger,
  normalizeRollResult,
  normalizeTop,
  normalizeBottom,
  normalizeWodBorders,
  normalizeRegexResult,
};

},{}],14:[function(require,module,exports){
const { resultNotation } = require( '../stringifier' );
/**
 * A class that represents a dice roll result
 * @class
 * @classdesc A class that represents a dice roll result
 * @since v2.0.0
 * @param {String} notation - A roll notation
 * @param {Number} value - A numeric representation of roll result, like total summ or success count
 * @param {Array} rolls - An array of rolls dome
 * @see Roll
 * @see WodRoll
 */
function Result( notation, value, rolls ) {
  this.notation = notation;
  this.value = value;
  this.rolls = rolls;
}

Result.prototype.toString = function toString() {
  return resultNotation( this );
};

module.exports = Result;

},{"../stringifier":21}],15:[function(require,module,exports){
const { fixInvalid, normalizeInteger } = require( '../normalizer' );
const { classicNotation } = require( '../stringifier' );

const positiveInteger = fixInvalid( 1 );

/**
 * A class that represents a dice roll from D&D setting
 * @class
 * @classdesc A class that represents a dice roll from D&D setting
 * @since v2.0.0
 * @param {Number} dice - A number of dice faces
 * @param {Number} count - A number of dices
 * @param {Number} modifier - A modifier, that should be added/sustracted from result
 * @see WodRoll
 */
function Roll( dice = 20, count = 1, modifier = 0 ) {
  this.dice = positiveInteger( dice );
  this.count = positiveInteger( count );
  this.modifier = normalizeInteger( modifier );
}

Roll.prototype.toString = function toString() {
  return classicNotation( this );
};

module.exports = Roll;

},{"../normalizer":13,"../stringifier":21}],16:[function(require,module,exports){
module.exports = {
  simple: 'simple',
  classic: 'classic',
  wod: 'wod',
};

},{}],17:[function(require,module,exports){
const { fixInvalid, normalizeWodBorders } = require( '../normalizer' );
const { wodNotation } = require( '../stringifier' );

const positiveInteger = fixInvalid( 1 );

/**
 * A class that represents a dice roll from World of Darkness setting
 * @class
 * @classdesc A class that represents a dice roll from World of Darkness setting
 * @since v2.0.0
 * @param {Number} dice - A number of dice faces
 * @param {Number} count - A number of dices
 * @param {Boolean} again - A flag for "10 Again" rolls policy
 * @param {Number} success - A minimum value, that counts as success
 * @param {Number} fail - A maximum value, that counts as failure
 * @see Roll
 */
function WodRoll( dice = 10, count = 1, again = false, success = 6, fail ) {
  this.dice = positiveInteger( dice );
  this.count = positiveInteger( count );
  this.again = !!again;
  [ this.fail, this.success ] = normalizeWodBorders( fail, success, this.dice );
}

WodRoll.prototype.toString = function toString() {
  return wodNotation( this );
};

module.exports = WodRoll;

},{"../normalizer":13,"../stringifier":21}],18:[function(require,module,exports){
const grammar = require( './grammar' );
const Type = require( './object/Type' );

// isUnary :: Array -> Boolean
const isUnary = array => array.length === 1;

// makeParser :: ( [ RegExp ], String ) -> ( String -> [ String | Undefined ] )
const makeParser = ( grammarSet, type ) => {
  if ( isUnary( grammarSet )) {
    return ( roll ) => {
      const result = grammarSet[ 0 ].exec( roll );
      if ( result ) {
        result.type = type;
      }
      return result;
    };
  }
  return ( roll ) => {
    let result = null;
    grammarSet.some( regex => ( result = regex.exec( roll )));
    if ( result ) {
      result.type = type;
    }
    return result;
  };
};

// parseSimple :: String -> [ String | Undefined ]
const parseSimple = makeParser( grammar.simple, Type.simple );
// parseClassic :: String -> [ String | Undefined ]
const parseClassic = makeParser( grammar.classic, Type.classic );
// parseWod :: String -> [ String | Undefined ]
const parseWod = makeParser( grammar.wod, Type.wod );
// parseAny :: String -> [ String | Undefined ]
const parseAny = roll => parseClassic( roll ) || parseSimple( roll ) || parseWod( roll );

module.exports = {
  makeParser,
  parseSimple,
  parseClassic,
  parseWod,
  parseAny,
};

},{"./grammar":11,"./object/Type":16}],19:[function(require,module,exports){
// random :: Number -> Number -> Number
//   Generates random integer from the range of [ min, max ] values
const random = min => max => Math.floor( Math.random() * (( max + 1 ) - min )) + min;

/**
 * Generates random positive integer from `1` to `max`.
 *
 * @func
 * @alias random
 * @since v2.0.0
 * @param {Number} max - maximum possible generated value
 * @return {Number} Positive integer, from `1` to `max`
 * @example
 * random(100); //=> 77 - random number from 1 to 100
 * random(1);   //=>  1 - always rolls 1
 */
const randomRoll = random( 1 );

module.exports = {
  random,
  randomRoll,
};

},{}],20:[function(require,module,exports){
const { randomRoll } = require( './random' );
const { normalizeRollResult, isDefined } = require( './normalizer' );
const { convertToRoll, convertToWodRoll, convertToAnyRoll } = require( './converter' );
const Result = require( './object/Result' );
const Roll = require( './object/Roll' );
const WodRoll = require( './object/WodRoll' );


/**
 * Rolls the dice from `Roll` object.
 *
 * @func
 * @since v2.0.0
 * @param {Roll} roll - `Roll` object or similar
 * @return {Result}
 * @see roll
 * @see rollWod
 * @example
 * rollClassic(new Roll(10, 2, -1)); //=> { notation: '2d10-1', value: 14, rolls: [ 7, 8 ] }
 * rollClassic({ dice: 6 }); //=> { notation: 'd6', value: 4, rolls: [ 4 ] }
 */
function rollClassic( roll ) {
  const data = roll instanceof Roll ? roll : convertToRoll( roll );
  const { dice, count, modifier } = data;

  const rolls = [ ...new Array( count ) ].map(() => randomRoll( dice ));
  const summ = rolls.reduce(( prev, curr ) => prev + curr, 0 );
  const result = normalizeRollResult( summ + modifier );

  return new Result( data.toString(), result, rolls );
}

/**
 * Rolls the dice from `WodRoll` object.
 *
 * @func
 * @since v2.0.0
 * @param {WodRoll} roll - `WodRoll` object or similar
 * @return {Result}
 * @see roll
 * @see rollClassic
 * @example
 * rollWod(new WodRoll(10, 4, true, 8)); //=> { notation: '4d10!>8', value: 2, rolls: [3,10,7,9,5] }
 * rollWod({ dice: 8, count: 3 }); //=> { notation: '3d8>6', value: 2, rolls: [ 7, 3, 9 ] }
 */
function rollWod( roll ) {
  const data = roll instanceof WodRoll ? roll : convertToWodRoll( roll );
  const { dice, count, again, success, fail } = data;

  const rolls = [];

  let i = count;
  while ( i > 0 ) {
    const value = randomRoll( dice );
    rolls.push( value );
    // Check for "10 Again" flag
    // `repeatLimit` will prevent infinite loop, for cases like `d1!>1`
    const repeatLimit = 100;
    if ( value !== dice || !again || rolls.length > repeatLimit ) {
      i -= 1;
    }
  }

  const result = rolls.reduce(( suc, val ) => {
    if ( val >= success ) {
      return suc + 1;
    } else if ( val <= fail ) {
      return suc - 1;
    }
    return suc;
  }, 0 );

  return new Result( data.toString(), Math.max( result, 0 ), rolls );
}

/**
 * Rolls the dice from `Roll` or `WodRoll` objects.
 *
 * @func
 * @alias roll
 * @since v2.0.0
 * @param {Roll|WodRoll|Object} roll - `Roll`, `WodRoll` or similar object.
 * @return {Result} Returns `Result` for defined parameters, otherwise returns `null`.
 * @see rollClassic
 * @see rollWod
 * @example
 * roll(new Roll(10, 2, -1)); //=> { notation: '2d10-1', value: 14, rolls: [ 7, 8 ] }
 * roll({ dice: 6 }); //=> { notation: 'd6', value: 4, rolls: [ 4 ] }
 * roll(new WodRoll(10, 4, true, 8)); //=> { notation: '4d10!>8', value: 2, rolls: [3,10,7,9,5] }
 * roll({ dice: 8, count: 3, again: true }); //=> { notation: '3d8!>6', value: 2, rolls: [7,3,9 ] }
 * roll( null ); //=> null
 */
function rollAny( roll ) {
  if ( roll instanceof Roll ) {
    return rollClassic( roll );
  } else if ( roll instanceof WodRoll ) {
    return rollWod( roll );
  }
  return isDefined( roll ) ? rollAny( convertToAnyRoll( roll )) : null;
}

module.exports = {
  rollClassic,
  rollWod,
  rollAny,
};

},{"./converter":10,"./normalizer":13,"./object/Result":14,"./object/Roll":15,"./object/WodRoll":17,"./random":19}],21:[function(require,module,exports){
function simpleNotation( roll ) {
  const count = roll.count > 1 ? `${ roll.count } ` : '';
  const modifier = roll.modifier ? ` ${ roll.modifier }` : '';

  return `${ count }${ roll.dice }${ modifier }`;
}

function classicNotation( roll ) {
  const count = roll.count > 1 ? roll.count : '';
  const modifier = roll.modifier > 0 ? `+${ roll.modifier }` : ( roll.modifier || '' );

  return `${ count }d${ roll.dice }${ modifier }`;
}

function wodNotation( roll ) {
  const count = roll.count > 1 ? roll.count : '';
  const again = roll.again ? '!' : '';
  const fail = roll.fail > 0 ? `f${ roll.fail }` : '';

  return `${ count }d${ roll.dice }${ again }>${ roll.success }${ fail }`;
}

function resultNotation( result ) {
  const { notation, value, rolls } = result;
  return `(${ notation }) ${ value } [${ rolls }]`;
}

module.exports = {
  simpleNotation,
  classicNotation,
  wodNotation,
  resultNotation,
};

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
